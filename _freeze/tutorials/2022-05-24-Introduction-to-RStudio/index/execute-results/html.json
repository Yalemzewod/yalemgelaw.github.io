{
  "hash": "6f3dc13abf48f55493a4481aef551148",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mastering RStudio: A Beginner’s Guide\"\ndescription: |\n  Essential Techniques and Tools for Effective R Programming\nauthor: \n  - name: Yalemzewod Gelaw\n    url: https://yalemzewodgelaw.com/\n    orcid: 0000-0002-5338-586 \ndate: 2024-05-24\nimage: \"media/rstudio.png\"\nslug: beginner’s guide\ncategories: [RStudio, R]\ntoc: true\ntoc-depth: 2\nnumber-sections: false\nhighlight-style: github\nformat:\n  html:\n    self-contained: true\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-tools: true\nknitr: \n opts_knit: \n   warning: false\n   message: false\n---\n\n\n::: callout-note\n## What's in it for you?\n\n-   Overview of RStudio\n\n-   Operators in R\n\n-   Coding and arithmetic operations\n\n-   Variable assignment, data types and structures\n\n-   Installing packages\n\n-   Getting help in R\n\n-   Import and explore data\n:::\n\n## Overview\n\nThe basic layout of RStudio will have three panels\n\n-   Console (entire left) - the interactive panel where you can type and execute R commands and it displays the output of those commands\n\n-   Environment/History/Connections (tabbed in upper right) - shows loaded variables and their values\n\n-   Files/Plots/Packages/Help/Viewer(tabbed in lower right) - displays project files and directories, show plots, list installed packages, provide access to R documentation\n\n### Project management in Rstudio\n\nIn RStudio, a project is a self-contained environment that manages all the files associated with a particular set of analyses or tasks. It's a powerful tool for organizing your work, maintaining reproducibility, and simplifying collaboration.\n\n::: {.callout-note appearance=\"simple\"}\n**Steps to set up**\n\n1.  Create a New Project:\n\n-   Click on `File` \\> `New Project`\n\n-   Choose `New Directory` for a new project or `Existing Directory` if you want to associate the project with an already existing folder.\n\n-   Follow the prompt to name your project and choose its location on your computer.\n\n2.  Open Existing Project:\n\n-   Navigate to the project directory and open the `.Rproj` file\n\n3.  Using Version Control:\n\n-   During the project creation, you can also initialize a Git repository if you want to use version control, which is highly recommended for tracking changes and collaborating with others.\n:::\n\nOnce a project is set up, RStudio will automatically set your working directory to the project's root folder each time you open it, which is incredibly convenient for file management and relative paths in your code.\n\n## Set working directory\n\nSet working directory is to tell R where to look for files and where to save outputs.\n\n::: callout-note\nTo set working directory - which is the folder where your R session is focused - you can use the following method\n\n1.  Using the `setwd()` function:\n\nType ``` setwd(\"path/to/your/directory\") and replace '``path/to/your/directory' with the actual path to your folder. Make sure to use forward slashes / or double slashes in your path ```\n\n2.  You can also use the graphic interface:\n\n-   Go to the **Session** menu at the top of RStudio.\n\n-   Choose **Set Working Directory**.\n\n-   Select **Choose Directory...** and navigate to the folder you want to set as your working directory.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath = \"C:/Users/User/Documents/R_training\"\nsetwd(path) # tell R to access the file from 'R_training' folder\ngetwd() # check the file folder\n```\n:::\n\n\n## Operators in R\n\n**Basic arithmetic and logical operators to perform mathematical operations and expressions in R are:**\n\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Operators                 | Example                                                                                                                                                                                      |\n+===========================+==============================================================================================================================================================================================+\n| \\+ addition               | Add two numbers `x + y`                                                                                                                                                                      |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| \\- subtraction            | Subtracts one number from the other `x - y`                                                                                                                                                  |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| / division                | Divides one number by another `x/y`                                                                                                                                                          |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| %% reminder/modulus       | Reminder of the devision of one number by another `x%%y`                                                                                                                                     |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| \\^ exponent               | Raises a number to the power of another `x^2`                                                                                                                                                |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| \\< Less than              | | `x < y` a logical comparison that checks if each element of the vector `x` is less than the corresponding elements of the vector `y`. The results are **TRUE** or **FALSE**.               |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| \\<= less than or equal to | `x <= y` a logical comparison that checks if each element of the vector `x` is less than or equal to the corresponding elements of the vector `y`. The results are **TRUE** or **FALSE**.    |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| \\> Greater than           | `x > y` a logical comparison that checks if each element of the vector `x` is greater than to the corresponding elements of the vector `y`. The results are **TRUE** or **FALSE**.           |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| \\>= Greater than          | `x >= y` a logical comparison that checks if each element of the vector `x` is greater than or equal to the corresponding elements of the vector `y`. The results are **TRUE** or **FALSE**. |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| == Equal to               | `x == y` a logical comparison that checks if each element of the vector `x` is equal to the corresponding elements of the vector `y`. The results are **TRUE** or **FALSE**.                 |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| = /\\<- Assign variable    | | **\\<**- A common assignment operator in R. It used to assign values to variables.                                                                                                          |\n|                           | | `x <- 10`                                                                                                                                                                                  |\n|                           | | `Z <- c(1, 2, 3, 4, 5)`                                                                                                                                                                    |\n|                           | | **=** also used for assignment in R and works similarly to **\\<-**                                                                                                                         |\n|                           | | `x = 10`                                                                                                                                                                                   |\n|                           | | `Z = \"Hello, World\"`                                                                                                                                                                       |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| != Not equal to           | | *!=* used for inequality comparison and returns a logical vector of **TRUE** or **FALSE**                                                                                                  |\n|                           | | x != y                                                                                                                                                                                     |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| & AND                     | & used for element-wise logical \"AND\". It returns TRUE only if both corresponding elements of the operator are TRUE.                                                                         |\n|                           |                                                                                                                                                                                              |\n|                           | | `x <- c(TRUE, FALSE, TRUE, FALSE)`                                                                                                                                                         |\n|                           | | `y <- c(TRUE, TRUE, FALSE, FALSE)`                                                                                                                                                         |\n|                           | |  `result <- x & y`                                                                                                                                                                         |\n|                           | | \\[1\\] TRUE FALSE FALSE FALSE\\`                                                                                                                                                             |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| \\| OR                     | \\| used for element-wise logical \"OR\". It returns TRUE if either corresponding elements of the operator are TRUE.                                                                            |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ! Not                     | | **!** is used for logical negation. It inverts the value of a logical expression: **TRUE** becomes **FALSE**                                                                               |\n|                           | | `x <- TRUE`                                                                                                                                                                                |\n|                           | | `result <- !x`                                                                                                                                                                             |\n|                           | | `result`                                                                                                                                                                                   |\n|                           | | \\[1\\] FALSE                                                                                                                                                                                |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| %\\<% and \\|\\> Pipes       | | `%<%` and `|>` are pipe operators from `dplyr` package used to pass the output of one function directly into another, which can help in creating a more clear and concise code.            |\n|                           | | `library(dplyr)`                                                                                                                                                                           |\n|                           | | `countries%>%`                                                                                                                                                                             |\n|                           | | `filter(Capital_city %in% \"Addis Ababa\") %>%`                                                                                                                                              |\n|                           | | `mutate(Region= \"Eeast Afirca\")`                                                                                                                                                           |\n|                           | | Without pipel                                                                                                                                                                              |\n|                           | | `filter`(`countries`, `Capital_city =\"Addis Ababa\"`)                                                                                                                                       |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| %IN% contained            | | `%in%  is used to determine if elements of one vector are contained in another vector`                                                                                                     |\n|                           | | `Example: x <- c(1, 2, 3, 4, 5)`                                                                                                                                                           |\n|                           | | `y <- c(3, 4, 5, 6, 7)`                                                                                                                                                                    |\n|                           | | `x %in% y`                                                                                                                                                                                 |\n|                           | | `[1] FALSE FALSE TRUE TRUE TRUE`                                                                                                                                                           |\n+---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n## Coding Basic Expression\n\n| Welcome to your first R programming experience if it's your first time using R. In RStudio, you can write in two places: the console and R scripts.\n| R Console: This is where you can directly enter and run R commands:\n\n![R Console](media/R_console.PNG){fig-align=\"center\"}\n\n| R Script is the source files (with a `.R` extension) where you can save your R code. To create an R script, got to the `File Menu` and select `New File > R Script`. This will open a fourth pane in RStudio for your script. Using R Scripts allows you to save your code and return it later. Let's get started! 📊\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1 # sum\n3^2 # sqrt\n3**2\n13%%2 #reminder/modules\n8/4 # divided\n2*4 # multiplication\n```\n:::\n\n\n::: callout-important\n## Order of Operation\n\nUnderstanding the order of arithmetic operations in R is crucial. The order from highest to lowest:\n\n**Parenthesis:** `()`\n\n**Exponential:** `^`\n\n**Multiplication:** `*`\n\n**Division:** `/`\n\n**Addition:** `+`\n\n**Subtraction:** `-`\n:::\n\nLet's practice using these operations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(1 + (2^2  * 4*8)) - (4/3) #what is the answer?\n```\n:::\n\n\n## Mathematical functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# natural logarithm\nlog(1) \n\n# base-10 logarithm\nlog10(10) \n\n# e^(1/2)\nexp(0.5) \n```\n:::\n\n\n## **Character operation**\n\n| R can also work with text.\n| R uses the print function to display the variables\n| The function `paste` and `past0` used to concatenate texts and variables together. For your challenge, what do you notice the difference between paste() and paste0()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello World\")\n\n# assign variable\ngreeting <- \"Hello\"\nname <- \"Yalem\"\nmessage <- paste(greeting, name) \nmessage\n\n# paste0()\nmessage2 <- paste0(greeting, name)\nprint(message2)\n\n# rep()\nrep(\"hello\",10)\n```\n:::\n\n\n## Logical operation\n\nA logical value is often created via a comparison between variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest = 89\nconf = 76\n\nconf < test\n\n\nx = 42\ny =144\nz = 12\nis.even <- (x %% 2 == 0)\n\nz\nx < y & is.even\nx > y | x > z\n```\n:::\n\n\nLet's create a scenario related to COVID-19 data analysis where you compare the number of cases and deaths in different countries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assume we have COVID-19 data for three countries: USA, India, and Brazil\n# We'll compare the total number of confirmed cases and deaths in these countries\n\n# Define COVID-19 data for each country\nUSA_cases <- 1000000\nUSA_deaths <- 50000\n\nIndia_cases <- 500000\nIndia_deaths <- 20000\n\nBrazil_cases <- 800000\nBrazil_deaths <- 40000\n\n# Compare the total number of cases and deaths\nUSA_more_cases <- USA_cases > India_cases & USA_cases > Brazil_cases\nIndia_more_cases <- India_cases > USA_cases & India_cases > Brazil_cases\nBrazil_more_cases <- Brazil_cases > USA_cases & Brazil_cases > India_cases\n\nUSA_more_deaths <- USA_deaths > India_deaths & USA_deaths > Brazil_deaths\nIndia_more_deaths <- India_deaths > USA_deaths & India_deaths > Brazil_deaths\nBrazil_more_deaths <- Brazil_deaths > USA_deaths & Brazil_deaths > India_deaths\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display the comparison results\nif (USA_more_cases) {\n  print(\"USA has the highest number of confirmed cases.\")\n} else if (India_more_cases) {\n  print(\"India has the highest number of confirmed cases.\")\n} else {\n  print(\"Brazil has the highest number of confirmed cases.\")\n}\n\nif (USA_more_deaths) {\n  print(\"USA has the highest number of deaths.\")\n} else if (India_more_deaths) {\n  print(\"India has the highest number of deaths.\")\n} else {\n  print(\"Brazil has the highest number of deaths.\")\n}\n```\n:::\n\n\n## Variable assignment\n\n<div>\n\nIn this scenario, we'll use malaria surveillance data to demonstrate variable declaration in R.\n\nVariables in R:\n\n-   A variable name must start with a letter.\n\n-   It can contain numbers, letters, underscores (\\_), and periods (.).\n\n-   Variable names cannot start with a number or contain spaces.\n\n</div>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Yalem\"\nassessment <- \"malaria\"\ndiagn <- \"microscopy\"\nresult <- \"Pf\"\n\n# Create the message\nmessage <- paste(name, \"'s result is \", result, \" positive.\", sep = \"\")\nprint(message)\n```\n:::\n\n\nIn R, the traditional method of assigning a value to a variable is using the left arrow `<-`. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <-  2\n```\n:::\n\n\nNotice that assigning a value does not print it. Instead, the value is stored in a variable. To see the value, you need to call the variable.\n\nLet's see this in action:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign a value to the variable 'tested'\ntested <- 420 \n\n# Display the value of 'tested'\ntested\n```\n:::\n\n\n**Example: Calculating and Rounding a Ratio**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# number\npositive = 284\n\n# ratio\nTest_positive <- positive/tested # float\n```\n:::\n\n\nThe **`round()`** function rounds its first argument to the specified number of decimal places (default is 0). Use `?round` to see the documentation for the `round()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# round the result\nround(Test_positive,3)*100 \n?round\n```\n:::\n\n\nYou can also assign a date as a variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign today \ntoday = Sys.Date() \n# print the date with the text\npaste(\"Today is\", today)\n```\n:::\n\n\n## Data types and structure\n\nR has several basic data types:\n\n| Data types | Description                                             |\n|------------|---------------------------------------------------------|\n| Numeric    | Numbers, including integers and floating-point numbers. |\n| Character  | Text strings.                                           |\n| Logical    | Boolean values (**`TRUE`** or **`FALSE`**).             |\n| Integer    | Whole numbers.                                          |\n| Complex    | Complex numbers with real and imaginary parts           |\n\n: *Data Types in R*\n\nLet's explore these in practice\n\n**Numeric**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric\nnum <- 42\nprint(num)\n```\n:::\n\n\n**Character**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchar <- \"malaria\"\nprint(char)\n```\n:::\n\n\n**Logical/Boolean**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog <- TRUE\nprint(log)\n```\n:::\n\n\n**Integer**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nint <- 5L\nprint(int)\n```\n:::\n\n\n**Complex**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp <- 1+2i\nprint(comp)\n```\n:::\n\n\n**How can you check the data type?**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?typeof()\n```\n:::\n\n\n## **Data Structures in R**\n\nR has several data structures to organize data:\n\n-   **Vector**: A sequence of data elements of the same basic type.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    vector <- c(1, 2, 3, 4, 5)\n    print(vector)\n    ```\n    :::\n\n\n    **Indexing**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    letter <- c('a', 'b','c', 'd', 'e')\n    letter[3] # retrive the third value\n    ```\n    :::\n\n\n-   **List**: An order of sequence of items that can have different data types.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    list <- list(name=\"Yalem\", assessment=\"malaria\", result=\"Pf\", age = 35, height = 1.68)\n    print(list)\n    \n    # retrive third element of the list\n    list[3]\n    ```\n    :::\n\n\n    ::: callout-tip\n    ***Challenge: update the list.***\n\n    Add the `weight`variable at the end with the value of 65 and update the `result` with 'neg' instead of 'pf'\n    :::\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    list$weight <- 64\n    \n    print(list)\n    ```\n    :::\n\n\n-   **Matrix**: A 2-dimensional array where each element has the same type.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    matrix <- matrix(1:6, nrow=2, ncol=3)\n    print(matrix)\n    ```\n    :::\n\n\n-   **Data Frame**: A table where each column can contain different types of data.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    malaria_data <- data.frame(name=c(\"Yalem\", \"Anna\"), result=c(\"Pf\", \"Neg\"))\n    print(data_frame)\n    \n    m_data <- cbind(name, result)\n    ? cbind()\n    ```\n    :::\n\n\n    ::: callout-caution\n    May I ask you to identify the difference between ***`malaria_data`*** and `m_data ?`\n    :::\n\n-   **Factor**: Used to handle categorical data.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    factor <- factor(c(\"Pf\", \"Neg\", \"Pf\"))\n    print(factor)\n    ```\n    :::\n\n\n### Installing packages\n\nA `pacakge` is a collection of functions developed by R experts for various purposes. R comes with built-in base function like `sum()`, `mean()`, `summay()`, and others. Additionally, you can install extra packages from `CRAN (Comprehensive R Archive Network)` or from GitHub repositories of the package developers. You can install packages from the CRAN in two ways: using the RStudio menu or via the command line.\n\n**Installing Packages Using the RStudio Menu:**\n\n1.  **Open RStudio**: Start RStudio on your computer.\n\n2.  **Navigate to Tools**: Click on the **`Tools`** menu at the top of the screen.\n\n3.  **Install Packages**: Select **`Install Packages...`** from the drop down menu.\n\n4.  **Choose Package**: In the dialogue box, type the name of the package you want to install (e.g., **`tidyverse`**).\n\n5.  **Install**: Click **`Install`** to download and install the package from CRAN.\n\n    ![Install package](media/install_pk.PNG){fig-align=\"center\"}\n\nFor example installing package via the command line\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install for the first time\ninstall.packages(\"tidyverse\")\n\n# Check if the package 'tidyverse' is already installed; if not, install it\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\n```\n:::\n\n\nThere are two ways of loading installed packages in R: ***`library()`*** and ***`require()`***, but they have some differences in terms of behaviour and usage.\n\nThe `library()` function is commonly used to load packages. If the specified package is not installed, *`library`()* will output an error and stop the execution of the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf) #Error in library(sf) : there is no package called ‘sf’\n```\n:::\n\n\n*The require()* function is useful for conditional loading within functions or scripts where you want running even if the package is missing. If the specified package is not installed, **`require()`** will output a warning but continue executing the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(sf) #Warning: there is no package called ‘sf’\n```\n:::\n\n\n## Getting Help in R\n\nR has extensive documentation and help features to assist users. There are different options to search for help:\n\n-   Help function: use **`?`** followed by the function name to get help on that function `?round`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ?round()\n    ```\n    :::\n\n\n-   Help search: Use `help.search()` to find help pages related to a topic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp.search(\"regression\")\n```\n:::\n\n\n-   **Vignettes**: Detailed guides and documentation provided by package authors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvignette(\"ggplot2-specs\")\n```\n:::\n\n\n-   **R Help Website**: Access the official R documentation online at [CRAN R Documentation](https://cran.r-project.org/) and R community help [stack overflow](https://stackoverflow.com/).\n\n## Importing and exploring data\n\nR provides various ways to import and explore data. You can use built-in datasets, import data from a website, or load data from a local file.\n\n1.  **Load Built-In Dataset**\n\nR comes with several built-in datasets that are included in the **`datasets`** package. These datasets are useful for practice and learning.\n\nTo load and explore a built-in dataset, you need to load the **`datasets`** package first. Here's how you can do it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the dataset package\nlibrary(datasets)\n\n# Load a built-in dataset, for example, the 'iris' dataset\ndata(iris)\n\n# View the first few rows of the dataset\nhead(iris)\n\n# Summary statistics of the dataset\nsummary(iris)\n```\n:::\n\n\n2.  **Import Data from a Website**\n\nYou can import data directly from a website. COVID19 data is available online at [COVID_19 HUB](https://covid19datahub.io/). As the file is stored as a `ZIP` file, to read and execute the content of a zipped CSV file from a URL in R, you can follow these steps:\n\n1.  Download the ZIP file from the URL.\n\n2.  Unzip the file.\n\n3.  Read the CSV file into R.\n\nIn the below example, you can load the `COVID-19` data by country. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install and load necessary packages\ninstall.packages(\"downloader\")\ninstall.packages(\"utils\")\n\nlibrary(downloader)\nlibrary(utils)\n\n# Define the URL and destination file\nurl <- \"https://storage.covid19datahub.io/country/AUS.csv.zip\"\ndestfile <- \"AUS.csv.zip\" # AUstralia\n\n# Download the ZIP file\ndownload(url, destfile, mode = \"wb\")\n\n# Unzip the file\nunzip(destfile, exdir = \".\")\n\n# Read the CSV file into R\nAsutralia_data <- read.csv(\"ETH.csv\")\n\n# Display the first few rows of the data\nhead(Asutralia_data)\n```\n:::\n\n\n3.  **Import Data From local file**\n\nData can be stored in different file types such as `csv`, `.xlsx`, `.dta` and `.sav`. Remember, you need to know the file formats of our data to install any necessary packages (e.g., `readxl`, haven) using install.packages(\"package_name\").\n\nLet's break down the information about reading different file types into R:\n\nCSV files: The most common file format is CSV (Comma-Separated Values). To import CSV files into R, you can use the `read.csv()` function from the base R package.\n\nExample using `read.csv()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus <- read.csv(\"C://Users/User/Documents/R_training/Tutorial_R/R_Tutorial/AUS.csv\")\n```\n:::\n\n\nExample using `read_csv()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus2 <- read.csv(\"C:/Users/User/Documents/R_training/Tutorial_R/R_Tutorial/AUS.csv\") \n```\n:::\n\n\n| Whilst `read.csv()` is the most common way to read data into R, there is the alternative `read_csv()` function (note the underscore). This is part of the tidyverse group of packages and is often a better option for reading in CSV files. This function is quicker, it reads the data in as a tibble instead of a data frame and allows for non-standard variable names among other benefits.\n| There are various options you can use when importing data, such as whether to include headers, what character to use for decimal points, and what to import as missing values. To explore these options you can look at the help pages e.g. `?read_csv`.\n| Excel Files `.xlsx`: To read Excel files into R, use the `read_excel()` function from the `readxl` package.\n| \n| When reading files in R, you might encounter the use of **`/`** and **`\\`**:\n\n-   **`/`**: In R, **`/`** is used as the directory separator in file paths. For example, **`\"C://Users/User/Documents/R_training/Tutorial_R/R_Tutorial/Leprosy_am_14.xlsx\"`** uses **`/`** to specify the directory structure.\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read one sheet, 2014_Q1\nlibrary(readxl) \nleprosy_q1 <- read_excel(\"C://Users/User/Documents/R_training/Tutorial_R/R_Tutorial/Leprosy_am_14.xlsx\",sheet = \"2014_Q1\", col_names = TRUE, na = \"NA\")\n```\n:::\n\n\nStata Files `.dta`: To read the Stata files, use the `read_dta()` function from the *haven* package (part of the tidyverse).\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\nmy_stata_data <- read_dta(\"C://Users/User/Documents/R_training/Tutorial_R/R_Tutorial/data_exr.dta\")\n```\n:::\n\n\n| Other Data Formats: Other formats like `SPSS`, `Matlab`, and `binary files` can also be read using specific functions.\n| For `SPSS` files, use `read_sav()` from the haven package.\n| For `Matlab` files, use `readMat()` from the `R.matlab` package.\n| For binary files, explore relevant functions based on your specific needs\n\n#### Import and Exploring Data\n\nAbout the data:\n\nThe data I used for this demonstration is a sample of routine leprosy data from Amhara Region, Ethiopia Leprosy surveillance system in 2014. The data were collected and collated at the district level (third administrative system) and stored in Excel file with four sheets. Let's explore the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install and load the tidyverse package if required\ninstall.packages(\"tidyverse\", \"janitor\")\nlibrary(tidyverse) # data management and visualization\nlibrary(janitor) #clean column \n# Specify the path to your Excel file\nexcel_file <- \"C://Users/User/Documents/R_training/Tutorial_R/R_Tutorial/Leprosy_am_14.xlsx\"\n\n# Read all sheets into a list\nall_sheets <- excel_sheets(excel_file) %>%\n  map(~ read_excel(excel_file, sheet = .x)) %>%\n  bind_rows(.id = \"sheet_name\")|> \nclean_names() #  Make the column names readable\n```\n:::\n\n\n**Inspect the data**\n\nTo get an overview of the data, you have several options:\n\nView the whole data: You can view the entire dataset by clicking on it in the global environment window. Alternatively, you can use the command View(routine_data) to open a window displaying the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n View(all_sheets)\n```\n:::\n\n\nView the Top Five Rows: To quickly inspect the first few rows of the dataset, you can use the head() function to see the top rows and the tail() function to see the last rows. This function displays the first n rows of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(all_sheets, 5) # top five\ntail(all_sheets, 5) # bottom five\n```\n:::\n\n\nUnderstand the structure of the data: To understand the structure of the data, you can use either the `str()` or `glimpse()` function.\n\n`str()` provides a concise summary of the structure of the dataset, including the data types and the first few values of each variable.\n\n`glimpse()` is part of the tidyverse ecosystem and offers a similar summary but with a focus on tibbles, providing additional information such as variable types and the first few values of each variable, displayed in a more compact format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(all_sheets) # Use str() for a concise summary\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(all_sheets) # Use glimpse() for a tidyverse-friendly summary\n```\n:::\n\n\nCheck the Class: You can check the class of the dataset, which could be either tbl or data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(all_sheets)\n```\n:::\n\n\nSelect Specific Rows or Columns: If you want to select specific rows or columns, you can use square brackets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(all_sheets[,2], 5) #View the second column\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall_sheets[1,] # view the first row\n```\n:::\n\n\nCheck Column Names: Checking column names is essential for identifying any missing or misspelled variables. Ensure that variable names are clean, short, and readable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(all_sheets) # using colnames\n\nnames(all_sheets) # using names\n\nvariable.names(all_sheets) # Assuming variable.names() is a custom function to retrieve variable names\n```\n:::\n\n\n<div>\n\n**Task 1**: -\n\n-   Import COVID-19 data for Ethiopia from COVID-19 Data Hub and assign a variable name `ETH`\n\n-   set `-9999` to the NA values of the death, confirmed, and test columns for the year 2020\n\n-   Explore the data length of the data\n\n</div>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}